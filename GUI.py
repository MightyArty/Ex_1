import sys
from PyQt5.QtCore import Qt

from PyQt5.QtWidgets import QApplication, QLabel, QWidget, QPushButton
from PyQt5.QtGui import QPainter, QColor, QFont, QPen


class gui(QWidget):
    def __init__(self):
        super().__init__()
        self.setFixedSize(900, 900)
        self.setWindowTitle("Elevators simulation")
        self.right_stack = []
        self.left_stack = []
        self.floor_labels_left = []
        self.floor_labels_right = []
        self.stack_height = 0

        self.l_status = QLabel(self)
        self.l_status.resize(230, 80)
        self.l_status.move(33, 33)
        self.l_status.show()

        self.b_start = QPushButton(self, text="Start")
        self.b_start.resize(100, 40)
        self.b_start.move(33, 850)
        self.b_start.show()

        self.b_x1 = QPushButton(self, text="x1")
        self.b_x1.resize(100, 40)
        self.b_x1.move(166, 850)
        self.b_x1.show()

        self.b_x5 = QPushButton(self, text="x5")
        self.b_x5.resize(100, 40)
        self.b_x5.move(300, 850)
        self.b_x5.show()

        self.b_x100 = QPushButton(self, text="x100")
        self.b_x100.resize(100, 40)
        self.b_x100.move(433, 850)
        self.b_x100.show()

        self.b_x1000 = QPushButton(self, text="x1000")
        self.b_x1000.resize(100, 40)
        self.b_x1000.move(566, 850)
        self.b_x1000.show()

        self.b_end = QPushButton(self, text="To end")
        self.b_end.resize(100, 40)
        self.b_end.move(700, 850)
        self.b_end.show()

    def setData(self, data):  # populate GUI with data generated by simulationData() function
        self.calls_left = data[0]
        self.calls_right = data[1]
        self.elevators = data[2]
        self.max_time = data[3]
        self.time = data[4]
        self.total_wait_time = data[5]
        self.avg_wait_time = data[6]
        self.min_floor = data[7]

        self.setFloorLabels(len(self.calls_left))

        for person in self.right_stack:
            person.deleteLater()
        self.right_stack = []
        for i in range(self.stack_height):
            self.right_stack.append(right_row(self))
            self.right_stack[i].setFloorCount(self.stack_height)
            self.right_stack[i].move(320, self.height() - 140 - i * (self.right_stack[i].height()))
            self.right_stack[i].setData(self.calls_right[i])
            self.right_stack[i].show()

        for person in self.left_stack:
            person.deleteLater()
        self.left_stack = []
        for i in range(self.stack_height):
            self.left_stack.append(left_row(self))
            self.left_stack[i].setFloorCount(self.stack_height)
            self.left_stack[i].move(0, self.height() - 140 - i * (self.left_stack[i].height()))
            self.left_stack[i].setData(self.calls_left[i])
            self.left_stack[i].show()

    def setFloorLabels(self, stack_height):
        if stack_height != self.stack_height:
            self.stack_height = stack_height

            for label in self.floor_labels_left:
                label.deleteLater()
            self.floor_labels_left = []

            for label in self.floor_labels_right:
                label.deleteLater()
            self.floor_labels_right = []

            if stack_height < 14:
                font = QFont()
                font.setPixelSize(12)

                for i in range(self.stack_height):
                    self.floor_labels_left.append(QLabel(self))
                    self.floor_labels_left[i].setFont(font)
                    self.floor_labels_left[i].setText(str(i + self.min_floor))
                    self.floor_labels_left[i].setAlignment(Qt.AlignLeft)
                    self.floor_labels_left[i].resize(30, 14)
                    self.floor_labels_left[i].move(200, self.height() - 140 - i * 50)
                    self.floor_labels_left[i].show()

                    self.floor_labels_right.append(QLabel(self))
                    self.floor_labels_right[i].setFont(font)
                    self.floor_labels_right[i].setText(str(i + self.min_floor))
                    self.floor_labels_right[i].setAlignment(Qt.AlignRight)
                    self.floor_labels_right[i].resize(30, 14)
                    self.floor_labels_right[i].move(285, self.height() - 140 - i * 50)
                    self.floor_labels_right[i].show()
            else:
                font = QFont()
                font.setPixelSize(12)

                i = 0
                for j in range(0, self.stack_height, 10):
                    self.floor_labels_left.append(QLabel(self))
                    self.floor_labels_left[i].setFont(font)
                    self.floor_labels_left[i].setText(str(j + self.min_floor))
                    self.floor_labels_left[i].setAlignment(Qt.AlignLeft)
                    self.floor_labels_left[i].resize(30, 14)
                    self.floor_labels_left[i].move(200, self.height() - 145 - j * 6)
                    self.floor_labels_left[i].show()

                    self.floor_labels_right.append(QLabel(self))
                    self.floor_labels_right[i].setFont(font)
                    self.floor_labels_right[i].setText(str(j + self.min_floor))
                    self.floor_labels_right[i].setAlignment(Qt.AlignRight)
                    self.floor_labels_right[i].resize(30, 14)
                    self.floor_labels_right[i].move(285, self.height() - 145 - j * 6)
                    self.floor_labels_right[i].show()
                    i += 1

    def paintEvent(self, event):
        p = QPainter(self)
        p.setPen(QPen(QColor(0, 0, 0), 1))

        p.end()


class person(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.resize(7, 8)  # For 10-storey building
        # self.resize(3,4) #For 112-storey building
        self.brushcolor = QColor(255, 0, 0)
        self.linecolor = QColor(255, 0, 0)
        self.solid = False

    def setColor(self, color):
        if color == "green":
            self.linecolor = QColor(0, 255, 0)
        if color == "red":
            self.linecolor = QColor(255, 0, 0)

    def setSolid(self, value):
        self.solid = value

    def paintEvent(self, event):
        pass
        if self.solid:
            self.brushcolor = self.linecolor
        else:
            self.brushcolor = QColor(255, 255, 255)

        p = QPainter(self)
        p.setBrush(self.brushcolor)
        p.setPen(QPen(self.linecolor, 1))

        p.drawRect(0, 0, self.width() - 1, self.height() - 1)
        p.end()


class left_row(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.personlist = []
        self.setFixedWidth(200)

    def setFloorCount(self, floors):
        if floors < 14:
            self.person_height = 25
            self.person_width = 10
            self.setFixedHeight(50)
        else:
            self.person_height = 5
            self.person_width = 5
            self.setFixedHeight(6)

    def setData(self, row):
        for i in range(row[0] + row[1]):
            self.personlist.append(person(self))
            self.personlist[i].resize(self.person_width, self.person_height)
            self.personlist[i].move(self.width() - (i + 1) * (self.personlist[i].width() + 2), 0)
            self.personlist[i].setColor("red")
            self.personlist[i].setSolid(True)
        for i in range(row[1]):
            self.personlist[i].setSolid(False)


class right_row(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.personlist = []

    def setFloorCount(self, floors):
        if floors < 14:
            self.person_height = 25
            self.person_width = 10
            self.setFixedHeight(50)
        else:
            self.person_height = 5
            self.person_width = 5
            self.setFixedHeight(6)

    def setData(self, row):
        for i in range(row[0] + row[1]):
            self.personlist.append(person(self))
            self.personlist[i].resize(self.person_width, self.person_height)
            self.personlist[i].move(i * (self.personlist[i].width() + 2), 0)
            self.personlist[i].setColor("green")
        for i in range(row[0]):
            self.personlist[i].setSolid(True)


class elevator(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.resize(70, 30)

    def paintEvent(self, event):
        p = QPainter(self)
        p.setBrush(QColor(0, 0, 0))
        p.drawRect(0, 0, self.width() - 1, self.height() - 1)
        p.end()


if __name__ == "__main__":
    test_data = (
        [[0, 0], [1, 2], [0, 0], [0, 0], [0, 0], [1, 0], [0, 0], [1, 0], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0]],
        [[8, 0], [28, 0], [29, 1], [6, 0], [2, 0], [3, 1], [3, 0], [7, 0], [3, 1], [2, 0], [2, 0], [2, 0], [5, 0]],
        [[0, 0]],
        5519.52096662,
        10000,
        211651.45076567997,
        2116.5145076567997,
        -2)

    app = QApplication(sys.argv)
    w = gui()
    w.show()
    w.setData(test_data)

    cleanup = app.exec()
    sys.exit(cleanup)